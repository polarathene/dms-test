name: "Test Merge Requests"

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'target/**'
      - 'test/**'
      - '.dockerignore'
      - '.gitmodules'
      - 'Dockerfile'
      - 'setup.sh'

permissions:
  contents: read

jobs:
  job-build-image:
    runs-on: ubuntu-20.04
    outputs:
      image-build-key: ${{ steps.derive-image-cache-key.outputs.digest }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          # Provides `configomat.sh`:
          submodules: recursive

      - name: 'Derive Docker image cache key from content'
        id: derive-image-cache-key
        shell: bash
        run: |
          ADDITIONAL_FILES=(
            'Dockerfile'
            'VERSION'
          )

          # Recursively collect file paths from `target/` and pipe a list of
          # checksums to be sorted (by hash value) and finally generate a checksum
          # of that list, using `awk` to only return the hash value (digest):
          IMAGE_CHECKSUM=$(\
            find ./target -type f -exec sha256sum "${ADDITIONAL_FILES[@]}" {} + \
              | sort \
              | sha256sum \
              | awk '{ print $1 }' \
          )

          echo "::set-output name=digest::${IMAGE_CHECKSUM}"

      # 5 sec cache restore, 7 sec cache post save/upload (skipped if cache-hit occurred)
      # cache-hit only applies to matching the exact key, not restore keys
      - name: 'Cache Docker layers'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: cache-buildxxx-${{ steps.derive-image-cache-key.outputs.digest }}
          # No exact cache-hit, look for a similar cache key and use that instead:
          restore-keys: |
            cache-buildxxx-

      # Support ARM64 builds on AMD64 host:
      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v2.0.0
        with:
          platforms: arm64

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v2.0.0
        id: buildx

      # 2 minute AMD64 only build vs 15 min for +arm64 +arm7
      # 37 sec with cache for AMD64 only (10 sec to import cache, 17 sec to export cache, 15 sec to export tar)
      # no output tar with no cache spending 22 sec to export/write cache
      - name: 'Build images locally'
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          build-args: |
            VCS_REF=${{ github.sha }}
            VCS_VER=${{ github.ref }}
          tags: mailserver-testing:ci
          # Build for AMD64 (runs against test suite) and ARM64 (we only test a successful build):
          platforms: linux/amd64
          # Paired with steps `actions/cache` and `Replace cache`:
          # https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#cache-from
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=cacheonly
          # Export AMD64 image for upload-artifact step, allowing other jobs to use it:
          # https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#docker
#          outputs: type=docker,dest=/tmp/dms-docker-img.tar

      # `type=local` cache type presently retains old cache data that is no longer used.
      # The workaround is to write cache to a different location and replace the
      # restored cache after build, reducing frequency of eviction due to cache storage limit (10GB).
      # https://github.com/docker/build-push-action/blob/965c6a410d446a30e95d35052c67d6eded60dad6/docs/advanced/cache.md?plain=1#L193-L199
      - name: 'Replace cache'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 2 minute upload possibly due to forced gzip? (+13 sec to download on job, +12 sec to load/import image)
      # 7 sec logged instead for cache post work
      # The job is split into build and test jobs, so that a build will be cached if tests fail.
      # This is required as the `actions/cache` step doesn't upload new cache until completing a job.
#      - name: 'Upload DMS Docker Image for job transfer'
#        uses: actions/upload-artifact@v3
#        with:
#          name: dms-build-${{ steps.derive-image-cache-key.outputs.digest }}
#          path: /tmp/dms-docker-img.tar
          # Artifact limits are unclear for open-source projects,
          # Each image is roughly 500MB+ (330MB on CI), if necessary reduce retention period:
          #retention-days: 1
      - name: 'List sizes'
        run: |
          # 330MB for both AMD64 locations
          #du -bch /tmp/dms-docker-img.tar
          du -bch /tmp/.buildx-cache/*

  job-run-tests:
    name: 'Run Test Suite'
    needs: job-build-image
    runs-on: ubuntu-20.04
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          # Needed for retrieving bats:
          submodules: recursive

      #- name: 'Retrieve DMS test image'
        #uses: actions/download-artifact@v3
        #with:
          #name: dms-build-${{ needs.job-build-image.outputs.image-build-key }}
          #path: /tmp

      #- name: 'Load image'
        #run: |
          #docker load --input /tmp/dms-docker-img.tar

      - name: 'Cache Docker layers'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: cache-buildxxx-${{ needs.job-build-image.outputs.image-build-key }}
          # No exact cache-hit, look for a similar cache key and use that instead:
          restore-keys: |
            cache-buildxxx-

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v2.0.0
        id: buildx

      # 30 sec import time (+2 cache restore, +3 buildx setup), slightly longer than download-artifact + load image, but better than 2 minute upload hit
      - name: 'Build images locally'
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          build-args: |
            VCS_REF=${{ github.sha }}
            VCS_VER=${{ github.ref }}
          tags: mailserver-testing:ci
          # Build for AMD64 (runs against test suite) and ARM64 (we only test a successful build):
          platforms: linux/amd64
          # Paired with steps `actions/cache` and `Replace cache`:
          # https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#cache-from
          cache-from: type=local,src=/tmp/.buildx-cache
          load: true

      - name: 'Run tests'
        env:
          CI: true
        run: |
          export TERM=xterm-256color
          NAME=mailserver-testing:ci
          bash -c 'make generate-accounts tests'
